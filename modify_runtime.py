import os
import random

# This script to check performance on your data-set of models which are trained
# for different country.

country = dict()
# Keys list
config = 'config'
region = 'region'
patterns = 'patterns'

# List should be updated if new country is added
country[config] = ['au', 'auwide', 'br', 'br2', 'eu', 'fr', 'gb', 'in', 'kr', 'kr2',
                   'mx', 'sg', 'us', 'vn2']
country[region] = ['au', 'br', 'br2', 'eu', 'in', 'kr2', 'us', 'vn2']
# country[region] = ['eu', 'vn2']

country[patterns] = ['au', 'br', 'eu', 'gb', 'in', 'kr', 'mx', 'sg', 'us']

runtime_path = '/home/prakash/pc/openalpr/runtime_data'
config_path = os.path.join(runtime_path, 'config')
config_file_extension = '.conf'
postprocess_path = os.path.join(runtime_path, 'postprocess')
postprocess_file_extension = '.patterns'

custom_pattern_file_path = 'my.txt'
custom_pattern_name = 'base'


def get_country_code():
    qualified_country = list()
    # if country is in country['region'] (xml generated by license plate detection)
    # and country['config'] (conf which has dimensional explanation of number plate)
    # is quilified for use alpr

    for c in country['region']:
        if c in country['config']:
            qualified_country.append(c)
    return qualified_country


def update_postprocess_files():
    qualified_country = get_country_code()
    for c in qualified_country:
        pt_file = os.path.join(postprocess_path, '{0}{1}'.
                               format(c, postprocess_file_extension))

        os.system('cp {0} {1}'.format(custom_pattern_file_path, pt_file))

    return


def update_config_files(postprocess_min_characters=6, postprocess_max_characters=10,
                        postprocess_regex_letters='[A-Z]', postprocess_regex_numbers='[0-9]'):
    # postprocess_min_characters and postprocess_max_characters should be replace with
    # new country requirement
    # postprocess_regex_letters and postprocess_regex_numbers should be replaced with
    # new country requirement e.g: postprocess_regex_letters = [A-Z] and
    # postprocess_regex_numbers = [0-9]
    """
    postprocess_min_characters
    postprocess_max_characters
    :return:
    """
    dic = dict()
    dic['postprocess_min_characters'] = postprocess_min_characters
    dic['postprocess_max_characters'] = postprocess_max_characters
    dic['postprocess_regex_letters'] = postprocess_regex_letters
    dic['postprocess_regex_numbers'] = postprocess_regex_numbers

    qualified_country = get_country_code()
    for c in qualified_country:
        temp_txt = 'temp{}.txt'.format(str(random.randint(0, 10000)).zfill(5))
        config_file = os.path.join(config_path, '{0}{1}'.format(c, config_file_extension))
        with open(config_file) as f:
            lines = f.readlines()

        os.system('touch {}'.format(temp_txt))
        with open(temp_txt, 'a') as f:
            for l in lines:
                if 'postprocess_min_characters' in l:
                    l = 'postprocess_min_characters = {}\n'.format(postprocess_min_characters)
                elif 'postprocess_max_characters' in l:
                    l = 'postprocess_max_characters = {}\n'.format(postprocess_max_characters)
                elif 'postprocess_regex_letters' in l:
                    l = 'postprocess_regex_letters = {}\n'.format(postprocess_regex_letters)
                elif 'postprocess_regex_numbers' in l:
                    l = 'postprocess_regex_numbers = {}\n'.format(postprocess_regex_numbers)
                f.write(l)

        os.system('cp {0} {1}'.format(temp_txt, config_file))
        os.system('rm {}'.format(temp_txt))


update_config_files()
update_postprocess_files()
print get_country_code()














